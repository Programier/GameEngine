SLANG_RAW("\n")
SLANG_RAW("// Custom Forward Derivative Function reference\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [ForwardDerivative(function)] : ForwardDerivativeAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [BackwardDerivative(function)] : BackwardDerivativeAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [PrimalSubstitute(function)] : PrimalSubstituteAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [ForwardDerivativeOf(function)] : ForwardDerivativeOfAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [BackwardDerivativeOf(function)] : BackwardDerivativeOfAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [PrimalSubstituteOf(function)] : PrimalSubstituteOfAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("__attributeTarget(DeclBase)\n")
SLANG_RAW("attribute_syntax [DerivativeMember(memberName)] : DerivativeMemberAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("// Exclude \"this\" parameter from differentiation.\n")
SLANG_RAW("__attributeTarget(FunctionDeclBase)\n")
SLANG_RAW("attribute_syntax [NoDiffThis] : NoDiffThisAttribute;\n")
SLANG_RAW("\n")
SLANG_RAW("// A 'none-type' that acts as a run-time sentinel for zero differentials.\n")
SLANG_RAW("export struct NullDifferential : IDifferentiable\n")
SLANG_RAW("{ \n")
SLANG_RAW("    // for now, we'll use at least one field to make sure the type is non-empty\n")
SLANG_RAW("    uint dummy;\n")
SLANG_RAW("    typedef NullDifferential Differential;\n")
SLANG_RAW("\n")
SLANG_RAW("    [Differentiable]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    static Differential dzero() { return { 0 }; }\n")
SLANG_RAW("\n")
SLANG_RAW("    [Differentiable]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    static Differential dadd(Differential, Differential) { return { 0 }; }\n")
SLANG_RAW("\n")
SLANG_RAW("    [Differentiable]\n")
SLANG_RAW("    [ForceInline]\n")
SLANG_RAW("    static Differential dmul<T: __BuiltinRealType>(T, Differential) { return { 0 }; }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("// Existential check for null differential type\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_IsDifferentialNull
)
SLANG_RAW(")\n")
SLANG_RAW("bool isDifferentialNull(IDifferentiable obj);\n")
SLANG_RAW("\n")
SLANG_RAW("/// Represents a GPU view of a tensor.\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__magic_type(TensorViewType)\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TensorViewType
)
SLANG_RAW(")\n")
SLANG_RAW("struct TensorView\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.data_ptr<$G0>()\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    Ptr<T> data_ptr();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.data_ptr_at<$G0>($1)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    Ptr<T> data_ptr_at(uint index);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N: int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.data_ptr_at<$G0>($1)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    Ptr<T> data_ptr_at(vector<uint, N> index);\n")
SLANG_RAW("\n")
SLANG_RAW("    __implicit_conversion(")
SLANG_SPLICE(kConversionCost_ImplicitDereference
)
SLANG_RAW(")\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_TorchTensorGetView
)
SLANG_RAW(")\n")
SLANG_RAW("    __init(TorchTensor<T> t);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.load<$G0>($1)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    T load(uint x);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.load<$G0>($1, $2)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    T load(uint x, uint y);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.load<$G0>($1, $2, $3)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    T load(uint x, uint y, uint z);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.load<$G0>($1, $2, $3, $4)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    T load(uint x, uint y, uint z, uint w);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.load<$G0>($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    T load(uint i0, uint i1, uint i2, uint i3, uint i4);\n")
SLANG_RAW("\n")
SLANG_RAW("    [__NoSideEffect]\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.load<$TR>($1)\")\n")
SLANG_RAW("    T load(vector<uint, N> index);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.store<$G0>($1, $2)\")\n")
SLANG_RAW("    void store(uint x, T val);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.store<$G0>($1, $2, $3)\")\n")
SLANG_RAW("    void store(uint x, uint y, T val);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.store<$G0>($1, $2, $3, $4)\")\n")
SLANG_RAW("    void store(uint x, uint y, uint z, T val);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.store<$G0>($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("    void store(uint x, uint y, uint z, uint w, T val);\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.store<$G0>($1, $2, $3, $4, $5, $6)\")\n")
SLANG_RAW("    void store(uint i0, uint i1, uint i2, uint i3, uint i4, T val);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.store<$T2>($1, $2)\")\n")
SLANG_RAW("    void store(vector<uint, N> index, T val);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicAdd($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedAdd(uint index, T val, out T oldVal);\n")
SLANG_RAW("    \n")
SLANG_RAW("    __generic<let N:int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicAdd($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedAdd(vector<uint, N> index, T val, out T oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.dimensionCount\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint dims();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.sizes[$1]\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint size(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.strides[$1]\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    uint stride(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint index) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(index); }\n")
SLANG_RAW("        [ForceInline] set { store(index, newValue); }\n")
SLANG_RAW("        \n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint i1, uint i2) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(i1, i2); }\n")
SLANG_RAW("        [ForceInline] set { store(i1, i2, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1, $2)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint2 i) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(i.x, i.y); }\n")
SLANG_RAW("        [ForceInline] set { store(i.x, i.y, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1.x, $1.y)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint i1, uint i2, uint i3) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(i1, i2, i3); }\n")
SLANG_RAW("        [ForceInline] set { store(i1, i2, i3, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1, $2, $3)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint3 i) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(i.x, i.y, i.z); }\n")
SLANG_RAW("        [ForceInline] set { store(i.x, i.y, i.z, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1.x, $1.y, $1.z)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint i1, uint i2, uint i3, uint i4) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(i1, i2, i3, i4); }\n")
SLANG_RAW("        [ForceInline] set { store(i1, i2, i3, i4, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1, $2, $3, $4)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint4 i) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__NoSideEffect][ForceInline] get { return load(i.x, i.y, i.z, i.w); }\n")
SLANG_RAW("        [ForceInline] set { store(i.x, i.y, i.z, i.w, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1.x, $1.y, $1.z, $1.w)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    __subscript(uint i1, uint i2, uint i3, uint i4, uint i5) -> T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceInline] [__NoSideEffect] get { return load(i1, i2, i3, i4, i5); }\n")
SLANG_RAW("        [ForceInline] set { store(i1, i2, i3, i4, i5, newValue); }\n")
SLANG_RAW("        __target_intrinsic(cuda, \"$0.load<$G0>($1, $2, $3, $4, $5)\")\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

for (auto atomicIntegerTypeName : kCudaAtomicIntegerTypes)
{
SLANG_RAW("#line 200 \"diff.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("extension TensorView<")
SLANG_SPLICE(atomicIntegerTypeName
)
SLANG_RAW(">\n")
SLANG_RAW("{\n")
SLANG_RAW("    typealias __Element = ")
SLANG_SPLICE(atomicIntegerTypeName
)
SLANG_RAW(";\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicMin($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedMin(uint index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicMin($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedMin(vector<uint, N> index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicMax($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedMax<T>(uint index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicMax($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedMax(vector<uint, N> index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicAnd($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedAnd<T>(uint index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicAnd($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedAnd(vector<uint, N> index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicOr($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedOr<T>(uint index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicOr($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedOr(vector<uint, N> index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicXor($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedXor<T>(uint index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicXor($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedXor(vector<uint, N> index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicExch($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedExchange(uint index, __Element va, out __Element oldVall);\n")
SLANG_RAW("    \n")
SLANG_RAW("    __generic<let N:int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicExch($0.data_ptr_at<$T2>($1), $2)\")\n")
SLANG_RAW("    void InterlockedExchange(vector<uint, N> index, __Element val, out __Element oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicCAS($0.data_ptr_at<$T2>($1), $2, $3)\")\n")
SLANG_RAW("    void InterlockedCompareExchange(uint index, __Element compare, __Element val);\n")
SLANG_RAW("    \n")
SLANG_RAW("    __generic<let N:int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicCAS($0.data_ptr_at<$T2>($1), $2, $3)\")\n")
SLANG_RAW("    void InterlockedCompareExchange(vector<uint, N> index, __Element compare, __Element val);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")

} // end for atomicIntegerTypeName
SLANG_RAW("#line 257 \"diff.meta.slang\"")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("extension TensorView<float>\n")
SLANG_RAW("{\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicExch($0.data_ptr_at<float>($1), $2)\")\n")
SLANG_RAW("    float InterlockedExchange(uint index, float val, out float oldVal);\n")
SLANG_RAW("    \n")
SLANG_RAW("    __generic<let N:int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"*($3) = atomicExch($0.data_ptr_at<float>($1), $2)\")\n")
SLANG_RAW("    float InterlockedExchange(vector<uint, N> index, float val, out float oldVal);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicCAS($0.data_ptr_at<uint32_t>($1), slang_bit_cast<uint32_t>($2), slang_bit_cast<uint32_t>($3))\")\n")
SLANG_RAW("    void InterlockedCompareExchange(uint index, float compare, float val);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    __target_intrinsic(cuda, \"atomicCAS($0.data_ptr_at<uint32_t>($1), slang_bit_cast<uint32_t>($2), slang_bit_cast<uint32_t>($3))\")\n")
SLANG_RAW("    void InterlockedCompareExchange(vector<uint, N> index, float compare, float val);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("interface IDiffTensorWrapper\n")
SLANG_RAW("{\n")
SLANG_RAW("    // Derivatives for universal load/store operations.\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T load_forward(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T load_forward(vector<uint, N> i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void load_backward(uint i, T dOut);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void load_backward(vector<uint, N> i, T dOut);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void store_forward(uint i, T dx);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void store_forward(vector<uint, N> i, T dx);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T store_backward(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T store_backward(vector<uint, N> i);\n")
SLANG_RAW("\n")
SLANG_RAW("    // Derivatives for loadOnce/storeOnce operations. These operations\n")
SLANG_RAW("    // are designed to only run once per-address and don't need atomic\n")
SLANG_RAW("    // gradient handling.\n")
SLANG_RAW("    //\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T loadOnce_forward(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T loadOnce_forward(vector<uint, N> i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void loadOnce_backward(uint i, T dOut);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void loadOnce_backward(vector<uint, N> i, T dOut);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void storeOnce_forward(uint i, T dx);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void storeOnce_forward(vector<uint, N> i, T dx);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T storeOnce_backward(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T storeOnce_backward(vector<uint, N> i);\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("struct AtomicAdd : IDiffTensorWrapper\n")
SLANG_RAW("{\n")
SLANG_RAW("    TensorView<float> diff;\n")
SLANG_RAW("\n")
SLANG_RAW("    // Derivatives for universal load/store operations.\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T load_forward(uint i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __realCast<T, float>(diff.load(i));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T load_forward(vector<uint, N> i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __realCast<T, float>(diff.load(i));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void load_backward(uint i, T dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float oldVal;\n")
SLANG_RAW("        diff.InterlockedAdd(i, __realCast<float, T>(dOut), oldVal);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void load_backward(vector<uint, N> i, T dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float oldVal;\n")
SLANG_RAW("        diff.InterlockedAdd(i, __realCast<float, T>(dOut), oldVal);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void store_forward(uint i, T dx)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.store(i, __realCast<float, T>(dx));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void store_forward(vector<uint, N> i, T dx)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.store(i, __realCast<float, T>(dx));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T store_backward(uint i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float oldVal;\n")
SLANG_RAW("        diff.InterlockedExchange(i, (float)0, oldVal);\n")
SLANG_RAW("        return __realCast<T, float>(oldVal);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T store_backward(vector<uint, N> i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        float oldVal;\n")
SLANG_RAW("        diff.InterlockedExchange(i, (float)0, oldVal);\n")
SLANG_RAW("        return __realCast<T, float>(oldVal);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Derivatives for loadOnce/storeOnce operations. These operations\n")
SLANG_RAW("    // are designed to only run once per-address and don't need atomic\n")
SLANG_RAW("    // gradient handling.\n")
SLANG_RAW("    //\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T loadOnce_forward(uint i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __realCast<T, float>(diff.load(i));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T loadOnce_forward(vector<uint, N> i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __realCast<T, float>(diff.load(i));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void loadOnce_backward(uint i, T dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.store(i, __realCast<float, T>(dOut));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void loadOnce_backward(vector<uint, N> i, T dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.store(i, __realCast<float, T>(dOut));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    void storeOnce_forward(uint i, T dx)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.store(i, __realCast<float, T>(dx));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    void storeOnce_forward(vector<uint, N> i, T dx)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.store(i, __realCast<float, T>(dx));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("    T storeOnce_backward(uint i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __realCast<T, float>(diff.load(i));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("    T storeOnce_backward(vector<uint, N> i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return __realCast<T, float>(diff.load(i));\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType = float, A : IDiffTensorWrapper = AtomicAdd>\n")
SLANG_RAW("struct DiffTensorView\n")
SLANG_RAW("{\n")
SLANG_RAW("    TensorView<T> primal;\n")
SLANG_RAW("    A diff;\n")
SLANG_RAW("\n")
SLANG_RAW("    uint size(uint i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return primal.size(i);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    uint dims()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return primal.dims();\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    uint stride(uint i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return primal.stride(i);\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Constructors\n")
SLANG_RAW("    __init(TensorView<T> primal, A diff)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        this.primal = primal;\n")
SLANG_RAW("        this.diff = diff;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __init(TensorView<T> primal)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        this.primal = primal;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // Universal load/store operations.\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__load_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__load_forward)]\n")
SLANG_RAW("    T load(uint i) { return primal.load(i); }\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__load_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__load_forward)]\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    T load(vector<uint, N> i) { return primal.load(i); }\n")
SLANG_RAW("\n")
SLANG_RAW("    DifferentialPair<T> __load_forward(uint x)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return diffPair(primal.load(x), reinterpret<T.Differential, T>(diff.load_forward<T>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    DifferentialPair<T> __load_forward(vector<uint, N> x)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return diffPair(primal.load(x), reinterpret<T.Differential, T>(diff.load_forward<T, N>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    void __load_backward(uint x, T.Differential dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.load_backward<T>(x, reinterpret<T, T.Differential>(dOut));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void __load_backward(vector<uint, N> x, T.Differential dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.load_backward<T, N>(x, reinterpret<T, T.Differential>(dOut));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__store_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__store_forward)]\n")
SLANG_RAW("    void store(uint x, T val) { primal.store(x, val); }\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__store_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__store_forward)]\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void store(vector<uint, N> x, T val) { primal.store(x, val); }\n")
SLANG_RAW("\n")
SLANG_RAW("    void __store_forward(uint x, DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        primal.store(x, dpval.p);\n")
SLANG_RAW("        diff.store_forward<T>(x, reinterpret<T, T.Differential>(dpval.d));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void __store_forward(vector<uint, N> x, DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        primal.store(x, dpval.p);\n")
SLANG_RAW("        diff.store_forward<T, N>(x, reinterpret<T, T.Differential>(dpval.d));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    void __store_backward(uint x, inout DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        dpval = diffPair(dpval.p, reinterpret<T.Differential, T>(diff.store_backward<T>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void __store_backward(vector<uint, N> x, inout DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        dpval = diffPair(dpval.p, reinterpret<T.Differential, T>(diff.store_backward<T, N>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint index)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(index); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(index, newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint2 index)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(index); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(index, newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint x, uint y)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(uint2(x, y)); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(uint2(x, y), newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint3 index)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(index); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(index, newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint x, uint y, uint z)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(uint3(x, y, z)); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(uint3(x, y, z), newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint4 index)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(index); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(index, newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __subscript(uint x, uint y, uint z, uint w)->T\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] [__NoSideEffect] get { return load(uint4(x, y, z, w)); }\n")
SLANG_RAW("        [__unsafeForceInlineEarly] [Differentiable] set { store(uint4(x, y, z, w), newValue); }\n")
SLANG_RAW("\n")
SLANG_RAW("        [__NoSideEffect]\n")
SLANG_RAW("        ref;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    // loadOnce/storeOnce operations. These operations are designed to only run once per-address and \n")
SLANG_RAW("    // don't need atomic gradient handling.\n")
SLANG_RAW("    //\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__loadOnce_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__loadOnce_forward)]\n")
SLANG_RAW("    T loadOnce(uint i) { return primal.load(i); }\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__loadOnce_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__loadOnce_forward)]\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    T loadOnce(vector<uint, N> i) { return primal.load(i); }\n")
SLANG_RAW("\n")
SLANG_RAW("    DifferentialPair<T> __loadOnce_forward(uint x)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return diffPair(primal.load(x), reinterpret<T.Differential, T>(diff.loadOnce_forward<T>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    DifferentialPair<T> __loadOnce_forward(vector<uint, N> x)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return diffPair(primal.load(x), reinterpret<T.Differential, T>(diff.loadOnce_forward<T, N>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    void __loadOnce_backward(uint x, T.Differential dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.loadOnce_backward<T>(x, reinterpret<T, T.Differential>(dOut));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void __loadOnce_backward(vector<uint, N> x, T.Differential dOut)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        diff.loadOnce_backward<T, N>(x, reinterpret<T, T.Differential>(dOut));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__storeOnce_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__storeOnce_forward)]\n")
SLANG_RAW("    void storeOnce(uint x, T val) { primal.store(x, val); }\n")
SLANG_RAW("\n")
SLANG_RAW("    [BackwardDerivative(__storeOnce_backward)]\n")
SLANG_RAW("    [ForwardDerivative(__storeOnce_forward)]\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void storeOnce(vector<uint, N> x, T val) { primal.store(x, val); }\n")
SLANG_RAW("\n")
SLANG_RAW("    void __storeOnce_forward(uint x, DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        primal.store(x, dpval.p);\n")
SLANG_RAW("        diff.storeOnce_forward<T>(x, reinterpret<T, T.Differential>(dpval.d));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void __storeOnce_forward(vector<uint, N> x, DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        primal.store(x, dpval.p);\n")
SLANG_RAW("        diff.storeOnce_forward<T, N>(x, reinterpret<T, T.Differential>(dpval.d));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    void __storeOnce_backward(uint x, inout DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        dpval = diffPair(dpval.p, reinterpret<T.Differential, T>(diff.storeOnce_backward<T>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<let N : int>\n")
SLANG_RAW("    void __storeOnce_backward(vector<uint, N> x, inout DifferentialPair<T> dpval)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        dpval = diffPair(dpval.p, reinterpret<T.Differential, T>(diff.storeOnce_backward<T, N>(x)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("};\n")
SLANG_RAW("\n")
SLANG_RAW("/// Represents the handle of a Torch tensor object.\n")
SLANG_RAW("__generic<T>\n")
SLANG_RAW("__intrinsic_type(")
SLANG_SPLICE(kIROp_TorchTensorType
)
SLANG_RAW(")\n")
SLANG_RAW("struct TorchTensor\n")
SLANG_RAW("{\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_TorchTensorGetView
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    TensorView<T> getView();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.dims()\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"$0.dims()\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    uint dims();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.size($1)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"$0.size($1)\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    uint size(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.stride($1)\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"$0.stride($1)\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    uint stride(uint i);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cuda, \"$0.data_ptr<$G0>()\")\n")
SLANG_RAW("    __target_intrinsic(cpp, \"$0.data_ptr<$G0>()\")\n")
SLANG_RAW("    [__readNone]\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    Ptr<T> data_ptr();\n")
SLANG_RAW("\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_AllocateTorchTensor
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> alloc(uint x);\n")
SLANG_RAW("\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_AllocateTorchTensor
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> alloc(uint x, uint y);\n")
SLANG_RAW("\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_AllocateTorchTensor
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> alloc(uint x, uint y, uint z);\n")
SLANG_RAW("\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_AllocateTorchTensor
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> alloc(uint x, uint y, uint z, uint w);\n")
SLANG_RAW("\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_AllocateTorchTensor
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> alloc(uint i0, uint i1, uint i2, uint i3, uint i4);\n")
SLANG_RAW("\n")
SLANG_RAW("    __intrinsic_op(")
SLANG_SPLICE(kIROp_AllocateTorchTensor
)
SLANG_RAW(")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> emptyLike(TorchTensor<T> other);\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cpp, \"$0.zero_()\")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    void fillZero();\n")
SLANG_RAW("\n")
SLANG_RAW("    __target_intrinsic(cpp, \"$0.fill_($1)\")\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    void fillValue(T val);\n")
SLANG_RAW("\n")
SLANG_RAW("    [CudaHost]\n")
SLANG_RAW("    static TorchTensor<T> zerosLike(TorchTensor<T> other)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        var result = emptyLike(other);\n")
SLANG_RAW("        result.fillZero();\n")
SLANG_RAW("        return result;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__target_intrinsic(cpp, \"AT_CUDA_CHECK(cudaStreamSynchronize(at::cuda::getCurrentCUDAStream()))\")\n")
SLANG_RAW("void syncTorchCudaStream();\n")
SLANG_RAW("\n")
SLANG_RAW("/// Constructs a `DifferentialPair` value from a primal value and a differential value.\n")
SLANG_RAW("__generic<T: IDifferentiable>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_MakeDifferentialPairUserCode
)
SLANG_RAW(")\n")
SLANG_RAW("DifferentialPair<T> diffPair(T primal, T.Differential diff);\n")
SLANG_RAW("\n")
SLANG_RAW("/// Constructs a `DifferentialPair` value from a primal value and a zero differential value.\n")
SLANG_RAW("__generic<T: IDifferentiable>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("DifferentialPair<T> diffPair(T primal)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return diffPair(primal, T.dzero());\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("void updatePrimal<T : IDifferentiable>(inout DifferentialPair<T> p, T newPrimal)\n")
SLANG_RAW("{\n")
SLANG_RAW("    p = DifferentialPair<T>(newPrimal, p.d);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("void updateDiff<T : IDifferentiable>(inout DifferentialPair<T> p, T.Differential newDiff)\n")
SLANG_RAW("{\n")
SLANG_RAW("    p = DifferentialPair<T>(p.p, newDiff);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("void updatePair<T : IDifferentiable>(inout DifferentialPair<T> p, T newPrimal, T.Differential newDiff)\n")
SLANG_RAW("{\n")
SLANG_RAW("    p = DifferentialPair<T>(newPrimal, newDiff);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T, let N:int>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_MakeArrayFromElement
)
SLANG_RAW(")\n")
SLANG_RAW("Array<T,N> makeArrayFromElement(T element);\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T:IDifferentiable, let N:int>\n")
SLANG_RAW("extension Array<T, N> : IDifferentiable\n")
SLANG_RAW("{\n")
SLANG_RAW("    typedef Array<T.Differential, N> Differential;\n")
SLANG_RAW("\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    static Differential dzero()\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return makeArrayFromElement<T.Differential, N>(T.dzero());\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    static Differential dadd(Differential a, Differential b)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        Array<T.Differential, N> result;\n")
SLANG_RAW("        for (int i = 0; i < N; i++)\n")
SLANG_RAW("            result[i] = T.dadd(a[i], b[i]);\n")
SLANG_RAW("        return result;\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    __generic<U : __BuiltinRealType>\n")
SLANG_RAW("    [__unsafeForceInlineEarly]\n")
SLANG_RAW("    static Differential dmul(U a, Differential b)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        Array<T.Differential, N> result;\n")
SLANG_RAW("        for (int i = 0; i < N; i++)\n")
SLANG_RAW("            result[i] = T.dmul<U>(a, b[i]);\n")
SLANG_RAW("        return result;\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Matrix transpose\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[ForwardDerivativeOf(transpose)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("DifferentialPair<matrix<T, M, N>> __d_transpose(DifferentialPair<matrix<T, N, M>> m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<matrix<T, M, N>>(transpose(m.p), transpose(m.d));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[BackwardDerivativeOf(transpose)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("void __d_transpose(inout DifferentialPair<matrix<T, N, M>> m, matrix<T, M, N>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    m = diffPair(m.p, transpose(dOut));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// vector-matrix\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[ForwardDerivativeOf(mul)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("DifferentialPair<vector<T, M>> mul(DifferentialPair<vector<T, N>> left, DifferentialPair<matrix<T, N, M>> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let primal = mul(left.p, right.p);\n")
SLANG_RAW("    let diff = mul(left.d, right.p) + mul(left.p, right.d);\n")
SLANG_RAW("    return DifferentialPair<vector<T,M>>(primal, diff);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[BackwardDerivativeOf(mul)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("void __d_mul(inout DifferentialPair<vector<T, N>> left, inout DifferentialPair<matrix<T, N, M>> right, vector<T, M>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T, N>.Differential left_d_result;\n")
SLANG_RAW("    matrix<T, N, M>.Differential right_d_result;\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int i = 0; i < N; ++i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for (int j = 0; j < M; ++j)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += right.p[i][j] * dOut[j];\n")
SLANG_RAW("            right_d_result[i][j] = left.p[i] * dOut[j];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        left_d_result[i] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    left = diffPair(left.p, left_d_result);\n")
SLANG_RAW("    right = diffPair(right.p, right_d_result);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// matrix-vector\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[ForwardDerivativeOf(mul)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("DifferentialPair<vector<T,N>> mul(DifferentialPair<matrix<T,N,M>> left, DifferentialPair<vector<T,M>> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let primal = mul(left.p, right.p);\n")
SLANG_RAW("    let diff = mul(left.d, right.p) + mul(left.p, right.d);\n")
SLANG_RAW("    return DifferentialPair<vector<T,N>>(primal, diff);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int>\n")
SLANG_RAW("[BackwardDerivativeOf(mul)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("void __d_mul(inout DifferentialPair<matrix<T, N, M>> left, inout DifferentialPair<vector<T, M>> right, vector<T, N>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T, N, M>.Differential left_d_result;\n")
SLANG_RAW("    vector<T, M>.Differential right_d_result;\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int j = 0; j < M; ++j)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T sum = T(0);\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for (int i = 0; i < N; ++i)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            sum += left.p[i][j] * dOut[i];\n")
SLANG_RAW("            left_d_result[i][j] = right.p[j] * dOut[i];\n")
SLANG_RAW("        }\n")
SLANG_RAW("        right_d_result[j] = sum;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    left = diffPair(left.p, left_d_result);\n")
SLANG_RAW("    right = diffPair(right.p, right_d_result);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// matrix-matrix\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let R : int, let N : int, let C : int>\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[ForwardDerivativeOf(mul)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("DifferentialPair<matrix<T,R,C>> mul(DifferentialPair<matrix<T,R,N>> left, DifferentialPair<matrix<T,N,C>> right)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let primal = mul(left.p, right.p);\n")
SLANG_RAW("    let diff = mul(left.d, right.p) + mul(left.p, right.d);\n")
SLANG_RAW("    return DifferentialPair<matrix<T,R,C>>(primal, diff);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let R : int, let N : int, let C : int>\n")
SLANG_RAW("[BackwardDerivativeOf(mul)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("void mul(inout DifferentialPair<matrix<T, R, N>> left, inout DifferentialPair<matrix<T, N, C>> right, matrix<T, R, C>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    matrix<T, R, N>.Differential left_d_result;\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int r = 0; r < R; ++r)\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for (int n = 0; n < N; ++n)\n")
SLANG_RAW("            left_d_result[r][n] = T(0.0);\n")
SLANG_RAW("\n")
SLANG_RAW("    matrix<T, N, C>.Differential right_d_result;\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int n = 0; n < N; ++n)\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for (int c = 0; c < C; ++c)\n")
SLANG_RAW("            right_d_result[n][c] = T(0.0);\n")
SLANG_RAW("\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int r = 0; r < R; ++r)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        [ForceUnroll]\n")
SLANG_RAW("        for (int c = 0; c < C; ++c)\n")
SLANG_RAW("        {\n")
SLANG_RAW("            [ForceUnroll]\n")
SLANG_RAW("            for (int n = 0; n < N; ++n)\n")
SLANG_RAW("            {\n")
SLANG_RAW("                left_d_result[r][n] += right.p[n][c] * dOut[r][c];\n")
SLANG_RAW("                right_d_result[n][c] += left.p[r][n] * dOut[r][c];\n")
SLANG_RAW("            }\n")
SLANG_RAW("        }\n")
SLANG_RAW("    }\n")
SLANG_RAW("    left = diffPair(left.p, left_d_result);\n")
SLANG_RAW("    right = diffPair(right.p, right_d_result);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector dot product\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[ForwardDerivativeOf(dot)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("DifferentialPair<T> __d_dot(DifferentialPair<vector<T, N>> dpx, DifferentialPair<vector<T, N>> dpy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    T result = T(0);\n")
SLANG_RAW("    T.Differential d_result = T.dzero();\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int i = 0; i < N; ++i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        result = result + dpx.p[i] * dpy.p[i];\n")
SLANG_RAW("        d_result = T.dadd(d_result, __slang_noop_cast<T.Differential>(dpx.p[i] * dpy.d[i]));\n")
SLANG_RAW("        d_result = T.dadd(d_result, __slang_noop_cast<T.Differential>(dpy.p[i] * dpx.d[i]));\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return DifferentialPair<T>(result, d_result);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDerivativeOf(dot)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("void __d_dot(inout DifferentialPair<vector<T, N>> dpx, inout DifferentialPair<vector<T, N>> dpy, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T, N>.Differential x_d_result, y_d_result;\n")
SLANG_RAW("    [ForceUnroll]\n")
SLANG_RAW("    for (int i = 0; i < N; ++i)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        x_d_result[i] = dpy.p[i] * __slang_noop_cast<T>(dOut);\n")
SLANG_RAW("        y_d_result[i] = dpx.p[i] * __slang_noop_cast<T>(dOut);\n")
SLANG_RAW("    }\n")
SLANG_RAW("    dpx = diffPair(dpx.p, x_d_result);\n")
SLANG_RAW("    dpy = diffPair(dpy.p, y_d_result);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Cross product\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[ForwardDerivativeOf(cross)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("DifferentialPair<vector<T, 3>> __d_cross(DifferentialPair<vector<T, 3>> a, DifferentialPair<vector<T, 3>> b)\n")
SLANG_RAW("{\n")
SLANG_RAW("    /*\n")
SLANG_RAW("    cx = ay * bz 429496726642949671764294967186 az * by\n")
SLANG_RAW("    cy = az * bx 429496726642949671764294967186 ax * bz\n")
SLANG_RAW("    cz = ax * by 429496726642949671764294967186 ay * bx\n")
SLANG_RAW("    */\n")
SLANG_RAW("    T aybz = a.p.y * b.p.z;\n")
SLANG_RAW("    T azby = a.p.z * b.p.y;\n")
SLANG_RAW("    T px = aybz - azby;\n")
SLANG_RAW("    T dx = (b.p.z - azby) * a.d.y + (a.p.y - azby) * b.d.z + (aybz - b.p.y) * a.d.z + (aybz - a.p.z) * b.d.y;\n")
SLANG_RAW("\n")
SLANG_RAW("    T azbx = a.p.z * b.p.x;\n")
SLANG_RAW("    T axbz = a.p.x * b.p.z;\n")
SLANG_RAW("    T py = azbx - axbz;\n")
SLANG_RAW("    T dy = (b.p.x - axbz) * a.d.z + (a.p.z - axbz) * b.d.x + (azbx - b.p.z) * a.d.x + (azbx - a.p.x) * b.d.z;\n")
SLANG_RAW("\n")
SLANG_RAW("    T axby = a.p.x * b.p.y;\n")
SLANG_RAW("    T aybx = a.p.y * b.p.x;\n")
SLANG_RAW("    T pz = axby - aybx;\n")
SLANG_RAW("    T dz = (b.p.y - aybx) * a.d.x + (a.p.x - aybx) * b.d.y + (axby - b.p.x) * a.d.y + (axby - a.p.y) * b.d.x;\n")
SLANG_RAW("    \n")
SLANG_RAW("    return DifferentialPair<vector<T, 3>>(vector<T, 3>(px, py, pz), vector<T, 3>.Differential(dx, dy, dz));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDerivativeOf(cross)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("void __d_cross(inout DifferentialPair<vector<T, 3>> a, inout DifferentialPair<vector<T, 3>> b, vector<T, 3>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    /*\n")
SLANG_RAW("    cx = ay * bz 429496726642949671764294967186 az * by\n")
SLANG_RAW("    cy = az * bx 429496726642949671764294967186 ax * bz\n")
SLANG_RAW("    cz = ax * by 429496726642949671764294967186 ay * bx\n")
SLANG_RAW("    */\n")
SLANG_RAW("    T dax = (-b.p.z * dOut.y) + (b.p.y * dOut.z);\n")
SLANG_RAW("    T day = (b.p.z * dOut.x) + (-b.p.x * dOut.z);\n")
SLANG_RAW("    T daz = (-b.p.y * dOut.x) + (b.p.x * dOut.y);\n")
SLANG_RAW("\n")
SLANG_RAW("    T dbx = (a.p.z * dOut.y) + (-a.p.y * dOut.z);\n")
SLANG_RAW("    T dby = (-a.p.z * dOut.x) + (a.p.x * dOut.z);\n")
SLANG_RAW("    T dbz = (a.p.y * dOut.x) + (-a.p.x * dOut.y);\n")
SLANG_RAW("\n")
SLANG_RAW("    a = diffPair(a.p, vector<T, 3>.Differential(dax, day, daz));\n")
SLANG_RAW("    b = diffPair(b.p, vector<T, 3>.Differential(dbx, dby, dbz));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MATRIX_BINARY_DIFF_IMPL(NAME)                                                 \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>                                   \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<vector<T, N>> __d_##NAME##_vector(                                      \\\n")
SLANG_RAW("        DifferentialPair<vector<T, N>> dpx, DifferentialPair<vector<T, N>> dpy)              \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        vector<T, N> result;                                                                 \\\n")
SLANG_RAW("        vector<T, N>.Differential d_result;                                                  \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < N; ++i)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> dp_elem = __d_##NAME(                                        \\\n")
SLANG_RAW("                DifferentialPair<T>(dpx.p[i], __slang_noop_cast<T.Differential>(dpx.d[i])),  \\\n")
SLANG_RAW("                DifferentialPair<T>(dpy.p[i], __slang_noop_cast<T.Differential>(dpy.d[i]))); \\\n")
SLANG_RAW("            result[i] = dp_elem.p;                                                           \\\n")
SLANG_RAW("            d_result[i] = __slang_noop_cast<T>(dp_elem.d);                                   \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        return DifferentialPair<vector<T, N>>(result, d_result);                             \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let M : int, let N : int>                      \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<matrix<T, M, N>> __d_##NAME##_matrix(                                   \\\n")
SLANG_RAW("        DifferentialPair<matrix<T, M, N>> dpx, DifferentialPair<matrix<T, M, N>> dpy)        \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        matrix<T, M, N> result;                                                              \\\n")
SLANG_RAW("        matrix<T, M, N>.Differential d_result;                                               \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < M; ++i)                                            \\\n")
SLANG_RAW("        [ForceUnroll] for (int j = 0; j < N; ++j)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> dp_elem = __d_##NAME(                                        \\\n")
SLANG_RAW("                DifferentialPair<T>(dpx.p[i][j], __slang_noop_cast<T.Differential>(dpx.d[i][j])),  \\\n")
SLANG_RAW("                DifferentialPair<T>(dpy.p[i][j], __slang_noop_cast<T.Differential>(dpy.d[i][j]))); \\\n")
SLANG_RAW("            result[i][j] = dp_elem.p;                                                        \\\n")
SLANG_RAW("            d_result[i][j] = __slang_noop_cast<T>(dp_elem.d);                                \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        return DifferentialPair<matrix<T, M, N>>(result, d_result);                          \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>                                   \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME##_vector(                                                                \\\n")
SLANG_RAW("            inout DifferentialPair<vector<T, N>> dpx,                                        \\\n")
SLANG_RAW("            inout DifferentialPair<vector<T, N>> dpy,                                        \\\n")
SLANG_RAW("            vector<T, N>.Differential dOut)                                                  \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        vector<T, N>.Differential left_d_result, right_d_result;                             \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < N; ++i)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> left_dp = diffPair(dpx.p[i], T.dzero());                     \\\n")
SLANG_RAW("            DifferentialPair<T> right_dp = diffPair(dpy.p[i], T.dzero());                    \\\n")
SLANG_RAW("            __d_##NAME(left_dp, right_dp, __slang_noop_cast<T.Differential>(dOut[i]));       \\\n")
SLANG_RAW("            left_d_result[i] = __slang_noop_cast<T>(left_dp.d);                              \\\n")
SLANG_RAW("            right_d_result[i] = __slang_noop_cast<T>(right_dp.d);                            \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        dpx = diffPair(dpx.p, left_d_result);                                                \\\n")
SLANG_RAW("        dpy = diffPair(dpy.p, right_d_result);                                               \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let M : int, let N : int>                      \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME##_matrix(                                                                \\\n")
SLANG_RAW("            inout DifferentialPair<matrix<T, M, N>> dpx,                                     \\\n")
SLANG_RAW("            inout DifferentialPair<matrix<T, M, N>> dpy,                                     \\\n")
SLANG_RAW("            matrix<T, M, N>.Differential dOut)                                               \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        matrix<T, M, N>.Differential left_d_result, right_d_result;                          \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < M; ++i)                                            \\\n")
SLANG_RAW("        [ForceUnroll] for (int j = 0; j < N; ++j)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> left_dp = diffPair(dpx.p[i][j], T.dzero());                  \\\n")
SLANG_RAW("            DifferentialPair<T> right_dp = diffPair(dpy.p[i][j], T.dzero());                 \\\n")
SLANG_RAW("            __d_##NAME(left_dp, right_dp, __slang_noop_cast<T.Differential>(dOut[i][j]));    \\\n")
SLANG_RAW("            left_d_result[i][j] = __slang_noop_cast<T>(left_dp.d);                           \\\n")
SLANG_RAW("            right_d_result[i][j] = __slang_noop_cast<T>(right_dp.d);                         \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        dpx = diffPair(dpx.p, left_d_result);                                                \\\n")
SLANG_RAW("        dpy = diffPair(dpy.p, right_d_result);                                               \\\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("#define VECTOR_MATRIX_TERNARY_DIFF_IMPL(NAME)                                                \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>                                   \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<vector<T, N>> __d_##NAME##_vector(                                      \\\n")
SLANG_RAW("        DifferentialPair<vector<T, N>> dpx,                                                  \\\n")
SLANG_RAW("        DifferentialPair<vector<T, N>> dpy,                                                  \\\n")
SLANG_RAW("        DifferentialPair<vector<T, N>> dpz)                                                  \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        vector<T, N> result;                                                                 \\\n")
SLANG_RAW("        vector<T, N>.Differential d_result;                                                  \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < N; ++i)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> dp_elem = __d_##NAME(                                        \\\n")
SLANG_RAW("                DifferentialPair<T>(dpx.p[i], __slang_noop_cast<T.Differential>(dpx.d[i])),  \\\n")
SLANG_RAW("                DifferentialPair<T>(dpy.p[i], __slang_noop_cast<T.Differential>(dpy.d[i])),  \\\n")
SLANG_RAW("                DifferentialPair<T>(dpz.p[i], __slang_noop_cast<T.Differential>(dpz.d[i]))); \\\n")
SLANG_RAW("            result[i] = dp_elem.p;                                                           \\\n")
SLANG_RAW("            d_result[i] = __slang_noop_cast<T>(dp_elem.d);                                   \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        return DifferentialPair<vector<T, N>>(result, d_result);                             \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let M : int, let N : int>                      \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<matrix<T, M, N>> __d_##NAME##_matrix(                                   \\\n")
SLANG_RAW("        DifferentialPair<matrix<T, M, N>> dpx,                                               \\\n")
SLANG_RAW("        DifferentialPair<matrix<T, M, N>> dpy,                                               \\\n")
SLANG_RAW("        DifferentialPair<matrix<T, M, N>> dpz)                                               \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        matrix<T, M, N> result;                                                              \\\n")
SLANG_RAW("        matrix<T, M, N>.Differential d_result;                                               \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < M; ++i)                                            \\\n")
SLANG_RAW("        [ForceUnroll] for (int j = 0; j < N; ++j)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> dp_elem = __d_##NAME(                                        \\\n")
SLANG_RAW("                DifferentialPair<T>(dpx.p[i][j], __slang_noop_cast<T.Differential>(dpx.d[i][j])),  \\\n")
SLANG_RAW("                DifferentialPair<T>(dpy.p[i][j], __slang_noop_cast<T.Differential>(dpy.d[i][j])),  \\\n")
SLANG_RAW("                DifferentialPair<T>(dpz.p[i][j], __slang_noop_cast<T.Differential>(dpz.d[i][j]))); \\\n")
SLANG_RAW("            result[i][j] = dp_elem.p;                                                        \\\n")
SLANG_RAW("            d_result[i][j] = __slang_noop_cast<T>(dp_elem.d);                                \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        return DifferentialPair<matrix<T, M, N>>(result, d_result);                          \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>                                   \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME##_vector(                                                                \\\n")
SLANG_RAW("            inout DifferentialPair<vector<T, N>> dpx,                                        \\\n")
SLANG_RAW("            inout DifferentialPair<vector<T, N>> dpy,                                        \\\n")
SLANG_RAW("            inout DifferentialPair<vector<T, N>> dpz,                                        \\\n")
SLANG_RAW("            vector<T, N>.Differential dOut)                                                  \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        vector<T, N>.Differential left_d_result, middle_d_result, right_d_result;            \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < N; ++i)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> left_dp = diffPair(dpx.p[i], T.dzero());                     \\\n")
SLANG_RAW("            DifferentialPair<T> middle_dp = diffPair(dpy.p[i], T.dzero());                   \\\n")
SLANG_RAW("            DifferentialPair<T> right_dp = diffPair(dpz.p[i], T.dzero());                    \\\n")
SLANG_RAW("            __d_##NAME(left_dp, middle_dp, right_dp,                                         \\\n")
SLANG_RAW("                __slang_noop_cast<T.Differential>(dOut[i]));                                 \\\n")
SLANG_RAW("            left_d_result[i] = __slang_noop_cast<T>(left_dp.d);                              \\\n")
SLANG_RAW("            middle_d_result[i] = __slang_noop_cast<T>(middle_dp.d);                          \\\n")
SLANG_RAW("            right_d_result[i] = __slang_noop_cast<T>(right_dp.d);                            \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        dpx = diffPair(dpx.p, left_d_result);                                                \\\n")
SLANG_RAW("        dpy = diffPair(dpy.p, middle_d_result);                                              \\\n")
SLANG_RAW("        dpz = diffPair(dpz.p, right_d_result);                                               \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let M : int, let N : int>                      \\\n")
SLANG_RAW("    [BackwardDifferentiable][PreferRecompute]                                                \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME##_matrix(                                                                \\\n")
SLANG_RAW("            inout DifferentialPair<matrix<T, M, N>> dpx,                                     \\\n")
SLANG_RAW("            inout DifferentialPair<matrix<T, M, N>> dpy,                                     \\\n")
SLANG_RAW("            inout DifferentialPair<matrix<T, M, N>> dpz,                                     \\\n")
SLANG_RAW("            matrix<T, M, N>.Differential dOut)                                               \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        matrix<T, M, N>.Differential left_d_result, middle_d_result, right_d_result;         \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < M; ++i)                                            \\\n")
SLANG_RAW("        [ForceUnroll] for (int j = 0; j < N; ++j)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            DifferentialPair<T> left_dp = diffPair(dpx.p[i][j], T.dzero());                  \\\n")
SLANG_RAW("            DifferentialPair<T> middle_dp = diffPair(dpy.p[i][j], T.dzero());                \\\n")
SLANG_RAW("            DifferentialPair<T> right_dp = diffPair(dpz.p[i][j], T.dzero());                 \\\n")
SLANG_RAW("            __d_##NAME(left_dp, middle_dp, right_dp,                                         \\\n")
SLANG_RAW("                __slang_noop_cast<T.Differential>(dOut[i][j]));                              \\\n")
SLANG_RAW("            left_d_result[i][j] = __slang_noop_cast<T>(left_dp.d);                           \\\n")
SLANG_RAW("            middle_d_result[i][j] = __slang_noop_cast<T>(middle_dp.d);                       \\\n")
SLANG_RAW("            right_d_result[i][j] = __slang_noop_cast<T>(right_dp.d);                         \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        dpx = diffPair(dpx.p, left_d_result);                                                \\\n")
SLANG_RAW("        dpy = diffPair(dpy.p, middle_d_result);                                              \\\n")
SLANG_RAW("        dpz = diffPair(dpz.p, right_d_result);                                               \\\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("#define UNARY_DERIVATIVE_IMPL(NAME, FWD_DIFF_FUNC, BWD_DIFF_FUNC)                            \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>                                                \\\n")
SLANG_RAW("    [BackwardDifferentiable] [PreferRecompute]                                               \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<T> __d_##NAME(DifferentialPair<T> dpx)                                  \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        typealias ReturnType = T;                                                            \\\n")
SLANG_RAW("        return DifferentialPair<T>(NAME(dpx.p), FWD_DIFF_FUNC);                              \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>                                   \\\n")
SLANG_RAW("    [BackwardDifferentiable] [PreferRecompute]                                               \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<vector<T, N>> __d_##NAME##_vector(DifferentialPair<vector<T, N>> dpx)   \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        typealias ReturnType = vector<T, N>;                                                 \\\n")
SLANG_RAW("        return DifferentialPair<ReturnType>(NAME(dpx.p), FWD_DIFF_FUNC);                     \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let M : int, let N : int>                      \\\n")
SLANG_RAW("    [BackwardDifferentiable] [PreferRecompute]                                               \\\n")
SLANG_RAW("    [ForwardDerivativeOf(NAME)]                                                              \\\n")
SLANG_RAW("    DifferentialPair<matrix<T, M, N>> __d_##NAME##_m(DifferentialPair<matrix<T, M, N>> dpm)  \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        typealias ReturnType = vector<T, N>;                                                 \\\n")
SLANG_RAW("        matrix<T, M, N>.Differential diff;                                                   \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < M; i++)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            var dpx = diffPair(dpm.p[i], dpm.d[i]);                                          \\\n")
SLANG_RAW("            diff[i] = __slang_noop_cast<vector<T, N>>(FWD_DIFF_FUNC);                        \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        return diffPair(NAME(dpm.p), diff);                                                  \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType>                                                \\\n")
SLANG_RAW("    [BackwardDifferentiable] [PreferRecompute]                                               \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME(inout DifferentialPair<T> dpx, T.Differential dOut)                      \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        typealias ReturnType = T;                                                            \\\n")
SLANG_RAW("        dpx = diffPair(dpx.p, BWD_DIFF_FUNC);                                                \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let N : int>                                   \\\n")
SLANG_RAW("    [BackwardDifferentiable] [PreferRecompute]                                               \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME##_vector(                                                                \\\n")
SLANG_RAW("        inout DifferentialPair<vector<T, N>> dpx, vector<T, N>.Differential dOut)            \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        typealias ReturnType = vector<T, N>;                                                 \\\n")
SLANG_RAW("        dpx = diffPair(dpx.p, BWD_DIFF_FUNC);                                                \\\n")
SLANG_RAW("    }                                                                                        \\\n")
SLANG_RAW("    __generic<T : __BuiltinFloatingPointType, let M : int, let N : int>                      \\\n")
SLANG_RAW("    [BackwardDifferentiable] [PreferRecompute]                                               \\\n")
SLANG_RAW("    [BackwardDerivativeOf(NAME)]                                                             \\\n")
SLANG_RAW("    void __d_##NAME##_matrix(                                                                \\\n")
SLANG_RAW("        inout DifferentialPair<matrix<T, M, N>> m, matrix<T, M, N>.Differential mdOut)       \\\n")
SLANG_RAW("    {                                                                                        \\\n")
SLANG_RAW("        typealias ReturnType = vector<T, N>;                                                 \\\n")
SLANG_RAW("        matrix<T, M, N>.Differential diff;                                                   \\\n")
SLANG_RAW("        [ForceUnroll] for (int i = 0; i < M; i++)                                            \\\n")
SLANG_RAW("        {                                                                                    \\\n")
SLANG_RAW("            var dpx = diffPair(m.p[i], m.d[i]);                                              \\\n")
SLANG_RAW("            var dOut = __slang_noop_cast<vector<T, N>>(mdOut[i]);                            \\\n")
SLANG_RAW("            diff[i] = BWD_DIFF_FUNC;                                                         \\\n")
SLANG_RAW("        }                                                                                    \\\n")
SLANG_RAW("        m = diffPair(m.p, diff);                                                             \\\n")
SLANG_RAW("    }\n")
SLANG_RAW("#define SIMPLE_UNARY_DERIVATIVE_IMPL(NAME, DIFF_FUNC) UNARY_DERIVATIVE_IMPL(NAME, __mul_p_d(DIFF_FUNC, dpx.d), __mul_p_d(DIFF_FUNC, dOut))\n")
SLANG_RAW("\n")
SLANG_RAW("/// Element-wise multiply for scalars and vectors for (T, T.Differential)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[Differentiable]\n")
SLANG_RAW("T.Differential __mul_p_d(T a, T.Differential b)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __slang_noop_cast<T.Differential>(a * __slang_noop_cast<T>(b));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[Differentiable]\n")
SLANG_RAW("T __mul_p_d(T a, T b)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return (a * b);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[__unsafeForceInlineEarly]\n")
SLANG_RAW("[Differentiable]\n")
SLANG_RAW("vector<T, N> __mul_p_d(vector<T, N> a, vector<T, N> b)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return a * b;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("/// Detach and set derivatives to zero.\n")
SLANG_RAW("__generic<T : IDifferentiable>\n")
SLANG_RAW("__intrinsic_op(")
SLANG_SPLICE(kIROp_DetachDerivative
)
SLANG_RAW(")\n")
SLANG_RAW("T detach(T x);\n")
SLANG_RAW("\n")
SLANG_RAW("#define SLANG_SQR(x) ((x)*(x))\n")
SLANG_RAW("\n")
SLANG_RAW("#define SLANG_SIGN(x) select(((x)>T(0.0)), ReturnType(T(1.0)), select(((x)==T(0.0)), ReturnType(T(0.0)), ReturnType(T(-1.0))))\n")
SLANG_RAW("\n")
SLANG_RAW("// Absolute value\n")
SLANG_RAW("UNARY_DERIVATIVE_IMPL(abs, (__mul_p_d(SLANG_SIGN(dpx.p), (dpx.d))), (__mul_p_d(SLANG_SIGN(dpx.p), (dOut))))\n")
SLANG_RAW("// Saturate\n")
SLANG_RAW("UNARY_DERIVATIVE_IMPL(saturate, select(dpx.p < T(0.0) || dpx.p > T(1.0), ReturnType.dzero(), dpx.d), select(dpx.p < T(0.0) || dpx.p > T(1.0), ReturnType.dzero(), dOut))\n")
SLANG_RAW("// frac\n")
SLANG_RAW("UNARY_DERIVATIVE_IMPL(frac, dpx.d, dOut)\n")
SLANG_RAW("// raidans, degrees\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(radians, ReturnType(T(0.01745329251994329576923690768489)))\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(degrees, ReturnType(T(57.295779513082320876798154814105)))\n")
SLANG_RAW("// Exponent\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(exp, exp(dpx.p))\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(exp2, exp2(dpx.p)* T(50.69314718055994530941723212145818))\n")
SLANG_RAW("// sin, sinh\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(sin, cos(dpx.p))\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(sinh, cosh(dpx.p))\n")
SLANG_RAW("// cos, cosh\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(cos, -sin(dpx.p))\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(cosh, sinh(dpx.p))\n")
SLANG_RAW("// tan, tanh\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(tan, T(1.0) / (cos(dpx.p) * cos(dpx.p)))\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(tanh, T(1.0) / (cosh(dpx.p) * cosh(dpx.p)))\n")
SLANG_RAW("// Logarithm\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(log, T(1.0) / dpx.p)\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(log10, T(1.0) / (dpx.p * T(52.3025850929940456840179914546844)))\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(log2, T(1.0) / (dpx.p * T(50.69314718055994530941723212145818)))\n")
SLANG_RAW("// Square root\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(sqrt, T(0.5) / sqrt(max(ReturnType(T(1e-7)), dpx.p)))\n")
SLANG_RAW("// Reciprocal\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(rcp, T(-1.0) / max(ReturnType(T(1e-7)), dpx.p * dpx.p))\n")
SLANG_RAW("// rsqrt\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(rsqrt, T(-0.5) / (dpx.p * sqrt(dpx.p)))\n")
SLANG_RAW("// Arc-sin\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(asin, T(1.0) / sqrt(T(1.0) - dpx.p * dpx.p))\n")
SLANG_RAW("// Arc-cos\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(acos, T(-1.0) / sqrt(T(1.0) - dpx.p * dpx.p))\n")
SLANG_RAW("// Arc-tan\n")
SLANG_RAW("SIMPLE_UNARY_DERIVATIVE_IMPL(atan, T(1.0) / (T(1.0) + dpx.p * dpx.p))\n")
SLANG_RAW("\n")
SLANG_RAW("// Atan2\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(atan2)]\n")
SLANG_RAW("DifferentialPair<T> __d_atan2(DifferentialPair<T> dpy, DifferentialPair<T> dpx)\n")
SLANG_RAW("{\n")
SLANG_RAW("    T.Differential dx = __mul_p_d(-dpy.p / (dpx.p * dpx.p + dpy.p * dpy.p), dpx.d);\n")
SLANG_RAW("    T.Differential dy = __mul_p_d(dpx.p / (dpx.p * dpx.p + dpy.p * dpy.p), dpy.d);\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        atan2(dpy.p, dpx.p),\n")
SLANG_RAW("        T.dadd(dx, dy));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(atan2)]\n")
SLANG_RAW("void __d_atan2(inout DifferentialPair<T> dpy, inout DifferentialPair<T> dpx, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, __mul_p_d(-dpy.p / (dpx.p * dpx.p + dpy.p * dpy.p), dOut));\n")
SLANG_RAW("    dpy = diffPair(dpy.p, __mul_p_d(dpx.p / (dpx.p * dpx.p + dpy.p * dpy.p), dOut));\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("VECTOR_MATRIX_BINARY_DIFF_IMPL(atan2)\n")
SLANG_RAW("\n")
SLANG_RAW("// fmod\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(fmod)]\n")
SLANG_RAW("DifferentialPair<T> __d_fmod(DifferentialPair<T> x, DifferentialPair<T> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(fmod(x.p, y.p), x.d);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(fmod)]\n")
SLANG_RAW("void __d_fmod(inout DifferentialPair<T> x, inout DifferentialPair<T> y, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    x = diffPair(x.p, dOut);\n")
SLANG_RAW("    y = diffPair(y.p);\n")
SLANG_RAW("}\n")
SLANG_RAW("VECTOR_MATRIX_BINARY_DIFF_IMPL(fmod)\n")
SLANG_RAW("\n")
SLANG_RAW("// Raise to a power\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(pow)]\n")
SLANG_RAW("DifferentialPair<T> __d_pow(DifferentialPair<T> dpx, DifferentialPair<T> dpy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    // Special case\n")
SLANG_RAW("    if (dpx.p < T(1e-6))\n")
SLANG_RAW("    {\n")
SLANG_RAW("        return DifferentialPair<T>(T(0.0), T.dzero());\n")
SLANG_RAW("    }\n")
SLANG_RAW("\n")
SLANG_RAW("    T val = pow(dpx.p, dpy.p);\n")
SLANG_RAW("    T.Differential d1 = __mul_p_d((val * log(dpx.p)), dpy.d);\n")
SLANG_RAW("    T.Differential d2 = __mul_p_d((val * dpy.p / dpx.p), dpx.d);\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        val,\n")
SLANG_RAW("        T.dadd(d1, d2)\n")
SLANG_RAW("    );\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(pow)]\n")
SLANG_RAW("void __d_pow(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpy, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    // Special case\n")
SLANG_RAW("    if (dpx.p < T(1e-6))\n")
SLANG_RAW("    {\n")
SLANG_RAW("        dpx = diffPair(dpx.p, T.dzero());\n")
SLANG_RAW("        dpy = diffPair(dpy.p, T.dzero());\n")
SLANG_RAW("    }\n")
SLANG_RAW("    else\n")
SLANG_RAW("    {\n")
SLANG_RAW("        T val = pow(dpx.p, dpy.p);\n")
SLANG_RAW("        dpx = diffPair(\n")
SLANG_RAW("            dpx.p,\n")
SLANG_RAW("            (__mul_p_d((val * dpy.p / dpx.p), dOut)));\n")
SLANG_RAW("        dpy = diffPair(\n")
SLANG_RAW("            dpy.p,\n")
SLANG_RAW("            (__mul_p_d((val * log(dpx.p)), dOut)));\n")
SLANG_RAW("    }\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("VECTOR_MATRIX_BINARY_DIFF_IMPL(pow)\n")
SLANG_RAW("\n")
SLANG_RAW("// Maximum\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(max)]\n")
SLANG_RAW("DifferentialPair<T> __d_max(DifferentialPair<T> dpx, DifferentialPair<T> dpy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        max(dpx.p, dpy.p),\n")
SLANG_RAW("        dpx.p > dpy.p ? dpx.d : dpy.d\n")
SLANG_RAW("    );\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(max)]\n")
SLANG_RAW("void __d_max(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpy, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, dpx.p > dpy.p ? dOut : T.dzero());\n")
SLANG_RAW("    dpy = diffPair(dpy.p, dpy.p > dpx.p ? dOut : T.dzero());\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("VECTOR_MATRIX_BINARY_DIFF_IMPL(max)\n")
SLANG_RAW("\n")
SLANG_RAW("// Minimum\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(min)]\n")
SLANG_RAW("DifferentialPair<T> __d_min(DifferentialPair<T> dpx, DifferentialPair<T> dpy)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        min(dpx.p, dpy.p),\n")
SLANG_RAW("        dpx.p < dpy.p ? dpx.d : dpy.d\n")
SLANG_RAW("    );\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(min)]\n")
SLANG_RAW("void __d_min(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpy, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, dpx.p < dpy.p ? dOut : T.dzero());\n")
SLANG_RAW("    dpy = diffPair(dpy.p, dpy.p < dpx.p ? dOut : T.dzero());\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("VECTOR_MATRIX_BINARY_DIFF_IMPL(min)\n")
SLANG_RAW("\n")
SLANG_RAW("// Lerp\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(lerp)]\n")
SLANG_RAW("DifferentialPair<T> __d_lerp(DifferentialPair<T> dpx, DifferentialPair<T> dpy, DifferentialPair<T> dps)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        lerp(dpx.p, dpy.p, dps.p),\n")
SLANG_RAW("        T.dadd(T.dadd(__mul_p_d((T(1.0) - dps.p), dpx.d), __mul_p_d(dps.p, dpy.d)), __mul_p_d((dpy.p - dpx.p), dps.d))\n")
SLANG_RAW("    );\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(lerp)]\n")
SLANG_RAW("void __d_lerp(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpy, inout DifferentialPair<T> dps, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, __mul_p_d((T(1.0) - dps.p), dOut));\n")
SLANG_RAW("    dpy = diffPair(dpy.p, __mul_p_d(dps.p, dOut));\n")
SLANG_RAW("    dps = diffPair(dpy.p, __mul_p_d((dpy.p - dpx.p), dOut));\n")
SLANG_RAW("}\n")
SLANG_RAW("VECTOR_MATRIX_TERNARY_DIFF_IMPL(lerp)\n")
SLANG_RAW("\n")
SLANG_RAW("//  Clamp\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[ForwardDerivativeOf(clamp)]\n")
SLANG_RAW("DifferentialPair<T> __d_clamp(DifferentialPair<T> dpx, DifferentialPair<T> dpMin, DifferentialPair<T> dpMax)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        clamp(dpx.p, dpMin.p, dpMax.p),\n")
SLANG_RAW("        dpx.p < dpMin.p ? (dpx.p > dpMax.p ? dpMax.d : dpx.d) : dpMin.d);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[BackwardDerivativeOf(clamp)]\n")
SLANG_RAW("void __d_clamp(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpMin, inout DifferentialPair<T> dpMax, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, dpx.p > dpMin.p && dpx.p < dpMax.p ? dOut : T.dzero());\n")
SLANG_RAW("    dpMin = diffPair(dpMin.p, dpx.p <= dpMin.p ? dOut : T.dzero());\n")
SLANG_RAW("    dpMax = diffPair(dpMin.p, dpx.p >= dpMax.p ? dOut : T.dzero());\n")
SLANG_RAW("}\n")
SLANG_RAW("VECTOR_MATRIX_TERNARY_DIFF_IMPL(clamp)\n")
SLANG_RAW("\n")
SLANG_RAW("// fma\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(fma)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("DifferentialPair<T> __d_fma(DifferentialPair<T> dpx, DifferentialPair<T> dpy, DifferentialPair<T> dpz)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        fma(dpx.p, dpy.p, dpz.p),\n")
SLANG_RAW("        T.dadd(T.dadd(__mul_p_d(dpy.p, dpx.d), __mul_p_d(dpx.p, dpy.d)), dpz.d));\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(fma)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __d_fma(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpy, inout DifferentialPair<T> dpz, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, __mul_p_d(dpy.p, dOut));\n")
SLANG_RAW("    dpy = diffPair(dpy.p, __mul_p_d(dpx.p, dOut));\n")
SLANG_RAW("    dpz = diffPair(dpz.p, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("VECTOR_MATRIX_TERNARY_DIFF_IMPL(fma)\n")
SLANG_RAW("\n")
SLANG_RAW("// mad\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(mad)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("DifferentialPair<T> __d_mad(DifferentialPair<T> dpx, DifferentialPair<T> dpy, DifferentialPair<T> dpz)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return DifferentialPair<T>(\n")
SLANG_RAW("        mad(dpx.p, dpy.p, dpz.p),\n")
SLANG_RAW("        T.dadd(T.dadd(__mul_p_d(dpy.p, dpx.d), __mul_p_d(dpx.p, dpy.d)), dpz.d));\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(mad)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __d_mad(inout DifferentialPair<T> dpx, inout DifferentialPair<T> dpy, inout DifferentialPair<T> dpz, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    dpx = diffPair(dpx.p, __mul_p_d(dpy.p, dOut));\n")
SLANG_RAW("    dpy = diffPair(dpy.p, __mul_p_d(dpx.p, dOut));\n")
SLANG_RAW("    dpz = diffPair(dpz.p, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("VECTOR_MATRIX_TERNARY_DIFF_IMPL(mad)\n")
SLANG_RAW("\n")
SLANG_RAW("// Smoothstep\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("T __smoothstep_impl(T minVal, T maxVal, T x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let t = saturate((x - minVal) / (maxVal - minVal));\n")
SLANG_RAW("    return t * t * (T(3.0) - T(2.0) * t);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(smoothstep)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("DifferentialPair<T> __d_smoothstep(DifferentialPair<T> minVal, DifferentialPair<T> maxVal, DifferentialPair<T> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__smoothstep_impl)(minVal, maxVal, x);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(smoothstep)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __d_smoothstep(inout DifferentialPair<T> minVal, inout DifferentialPair<T> maxVal, inout DifferentialPair<T> x, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __bwd_diff(__smoothstep_impl)(minVal, maxVal, x, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("VECTOR_MATRIX_TERNARY_DIFF_IMPL(smoothstep)\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector length\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("T __length_impl(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    T len = T(0.0);\n")
SLANG_RAW("    [ForceUnroll] for (int i = 0; i < N; i++)\n")
SLANG_RAW("    {\n")
SLANG_RAW("        len += x[i] * x[i];\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return sqrt(len);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(length)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("DifferentialPair<T> __d_length(DifferentialPair<vector<T, N>> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__length_impl)(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(length)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __d_length(inout DifferentialPair<vector<T, N>> x, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __bwd_diff(__length_impl)(x, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector distance\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("T __distance_impl(vector<T, N> x, vector<T, N> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return length(y - x);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(distance)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("DifferentialPair<T> __d_distance(DifferentialPair<vector<T, N>> x, DifferentialPair<vector<T, N>> y)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__distance_impl)(x, y);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(distance)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __d_distance(inout DifferentialPair<vector<T, N>> x, inout DifferentialPair<vector<T, N>> y, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __bwd_diff(__distance_impl)(x, y, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector normalize\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("vector<T, N> __normalize_impl(vector<T, N> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let r = T(1.0) / length(x);\n")
SLANG_RAW("    return x * r;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(normalize)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("DifferentialPair<vector<T, N>> __d_normalize(DifferentialPair<vector<T, N>> x)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__normalize_impl)(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(normalize)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __d_distance(inout DifferentialPair<vector<T, N>> x, vector<T, N>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __bwd_diff(__normalize_impl)(x, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector reflect\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("vector<T, N> __reflect_impl(vector<T, N> i, vector<T, N> n)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return  i - n * (T(2.0) * dot(i, n));\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(reflect)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("DifferentialPair<vector<T, N>> __d_reflect(DifferentialPair<vector<T, N>> i, DifferentialPair<vector<T, N>> n)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__reflect_impl)(i, n);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(reflect)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("void __d_reflect(inout DifferentialPair<vector<T, N>> i, inout DifferentialPair<vector<T, N>> n, vector<T, N>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __bwd_diff(__reflect_impl)(i, n, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Vector refract\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("vector<T, N> __refract_impl(vector<T, N> i, vector<T, N> n, T eta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let k = T(1.0) - eta * eta * (T(1.0) - dot(n, i) * dot(n, i));\n")
SLANG_RAW("    return (k < T(0.0)) ? vector<T, N>(T(0.0)) : eta * i - (eta * dot(n, i) + sqrt(max(T(0.0),k))) * n;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(refract)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("DifferentialPair<vector<T, N>> __d_refract(DifferentialPair<vector<T, N>> i, DifferentialPair<vector<T, N>> n, DifferentialPair<T> eta)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__refract_impl)(i, n, eta);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T: __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(refract)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("void __d_refract(inout DifferentialPair<vector<T, N>> i, inout DifferentialPair<vector<T, N>> n, inout DifferentialPair<T> eta, vector<T, N>.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __bwd_diff(__refract_impl)(i, n, eta, dOut);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Sine and cosine\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PrimalSubstituteOf(sincos)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __sincos_impl(T x, out T s, out T c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    s = sin(x);\n")
SLANG_RAW("    c = cos(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("[PrimalSubstituteOf(sincos)]\n")
SLANG_RAW("void __sincos_impl(vector<T, N> x, out vector<T, N> s, out vector<T, N> c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    s = sin(x);\n")
SLANG_RAW("    c = cos(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int, let M : int, let L1 : int, let L2 : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PrimalSubstituteOf(sincos)]\n")
SLANG_RAW("[PreferRecompute]\n")
SLANG_RAW("void __sincos_impl(matrix<T, N, M> x, out matrix<T, N, M, L1> s, out matrix<T, N, M, L2> c)\n")
SLANG_RAW("{\n")
SLANG_RAW("    s = sin(x);\n")
SLANG_RAW("    c = cos(x);\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("\n")
SLANG_RAW("// dst (obsolete)\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PrimalSubstituteOf(dst)]\n")
SLANG_RAW("vector<T, 4> __dst_impl(vector<T, 4> src0, vector<T, 4> src1)\n")
SLANG_RAW("{\n")
SLANG_RAW("    vector<T, 4> dest;\n")
SLANG_RAW("    dest.x = T(1.0);\n")
SLANG_RAW("    dest.y = src0.y * src1.y;\n")
SLANG_RAW("    dest.z = src0.z;\n")
SLANG_RAW("    dest.w = src1.w; ;\n")
SLANG_RAW("    return dest;\n")
SLANG_RAW("}\n")
SLANG_RAW("\n")
SLANG_RAW("// Legacy lighting function (obsolete)\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[PrimalSubstituteOf(lit)]\n")
SLANG_RAW("float4 __lit_impl(float n_dot_l, float n_dot_h, float m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    let ambient = 1.0f;\n")
SLANG_RAW("    let diffuse = max(n_dot_l, 0.0f);\n")
SLANG_RAW("    let specular = ((n_dot_l < 0.0f || n_dot_h < 0.0) ? 0.0 : pow(n_dot_h, m));\n")
SLANG_RAW("    return float4(ambient, diffuse, specular, 1.0f);\n")
SLANG_RAW("}\n")
SLANG_RAW("// Matrix determinant\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[__readNone]\n")
SLANG_RAW("T __determinant_impl(matrix<T,N,N> m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    T result = T(0);\n")
SLANG_RAW("    switch (N)\n")
SLANG_RAW("    {\n")
SLANG_RAW("    case 1:\n")
SLANG_RAW("        result = m[0][0];\n")
SLANG_RAW("        break;\n")
SLANG_RAW("    case 2:\n")
SLANG_RAW("        result = m[0][0] * m[1][1] - m[0][1] * m[1][0];\n")
SLANG_RAW("        break;\n")
SLANG_RAW("    case 3:\n")
SLANG_RAW("        result =  m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])\n")
SLANG_RAW("\t\t      - m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])\n")
SLANG_RAW("\t\t\t  + m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]);\n")
SLANG_RAW("        break;\n")
SLANG_RAW("    case 4:\n")
SLANG_RAW("        T s00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];\n")
SLANG_RAW("\t\tT s01 = m[2][1] * m[3][3] - m[3][1] * m[2][3];\n")
SLANG_RAW("\t\tT s02 = m[2][1] * m[3][2] - m[3][1] * m[2][2];\n")
SLANG_RAW("\t\tT s03 = m[2][0] * m[3][3] - m[3][0] * m[2][3];\n")
SLANG_RAW("\t\tT s04 = m[2][0] * m[3][2] - m[3][0] * m[2][2];\n")
SLANG_RAW("\t\tT s05 = m[2][0] * m[3][1] - m[3][0] * m[2][1];\n")
SLANG_RAW("\n")
SLANG_RAW("\t\tresult = m[0][0] * (m[1][1] * s00 - m[1][2] * s01 + m[1][3] * s02)\n")
SLANG_RAW("\t\t\t - m[0][1] * (m[1][0] * s00 - m[1][2] * s03 + m[1][3] * s04)\n")
SLANG_RAW("\t\t\t + m[0][2] * (m[1][0] * s01 - m[1][1] * s03 + m[1][3] * s05)\n")
SLANG_RAW("\t\t\t - m[0][3] * (m[1][0] * s02 - m[1][1] * s04 + m[1][2] * s05);\n")
SLANG_RAW("        break;\n")
SLANG_RAW("    }\n")
SLANG_RAW("    return result;\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[ForwardDerivativeOf(determinant)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("DifferentialPair<T> __determinant_impl(DifferentialPair<matrix<T,N,N>> m)\n")
SLANG_RAW("{\n")
SLANG_RAW("    return __fwd_diff(__determinant_impl)(m);\n")
SLANG_RAW("}\n")
SLANG_RAW("__generic<T : __BuiltinFloatingPointType, let N : int>\n")
SLANG_RAW("[BackwardDifferentiable]\n")
SLANG_RAW("[BackwardDerivativeOf(determinant)]\n")
SLANG_RAW("[ForceInline]\n")
SLANG_RAW("void __d_determinant(inout DifferentialPair<matrix<T,N,N>> m, T.Differential dOut)\n")
SLANG_RAW("{\n")
SLANG_RAW("    __bwd_diff(__determinant_impl)(m, dOut);\n")
SLANG_RAW("}\n")
