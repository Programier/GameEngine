#pragma once

// Do not edit this file is generated from slang-cpp-extractor tool

namespace Slang {

enum class ValueType
{
DeclCheckStateExt = 0,
QualType = 1,
TypeExp = 2,
LookupResultItem = 3,
RequirementWitness = 4,
SpecializationArg = 5,
    ExpandedSpecializationArg = 6,
SPIRVAsmOperand = 7,
SPIRVAsmInst = 8,
    CountOf
};

// Predeclare

struct DeclCheckStateExt;
struct QualType;
struct TypeExp;
struct LookupResultItem;
struct RequirementWitness;
struct SpecializationArg;
struct ExpandedSpecializationArg;
class SPIRVAsmOperand;
class SPIRVAsmInst;
// Type macros

// Order is (NAME, SUPER, ORIGIN, LAST, MARKER, TYPE, param) 
// NAME - is the class name
// SUPER - is the super class name (or NO_SUPER)
// ORIGIN - where the definition was found
// LAST - is the class name for the last in the range (or NO_LAST)
// MARKER - is the text inbetween in the prefix/postix (like ABSTRACT). If no inbetween text is is 'NONE'
// TYPE - Can be BASE, INNER or LEAF for the overall base class, an INNER class, or a LEAF class
// param is a user defined parameter that can be parsed to the invoked x macro

#define SLANG_Value_DeclCheckStateExt(x, param)     x(DeclCheckStateExt, NO_SUPER, AST_SUPPORT_TYPES, DeclCheckStateExt, VALUE, BASE, param)
#define SLANG_Value_QualType(x, param)     x(QualType, NO_SUPER, AST_SUPPORT_TYPES, QualType, VALUE, BASE, param)
#define SLANG_Value_TypeExp(x, param)     x(TypeExp, NO_SUPER, AST_SUPPORT_TYPES, TypeExp, VALUE, BASE, param)
#define SLANG_Value_LookupResultItem(x, param)     x(LookupResultItem, NO_SUPER, AST_SUPPORT_TYPES, LookupResultItem, VALUE, BASE, param)
#define SLANG_Value_RequirementWitness(x, param)     x(RequirementWitness, NO_SUPER, AST_SUPPORT_TYPES, RequirementWitness, VALUE, BASE, param)
#define SLANG_Value_SpecializationArg(x, param)     x(SpecializationArg, NO_SUPER, AST_SUPPORT_TYPES, ExpandedSpecializationArg, VALUE, BASE, param)
#define SLANG_Value_ExpandedSpecializationArg(x, param)     x(ExpandedSpecializationArg, SpecializationArg, AST_SUPPORT_TYPES, ExpandedSpecializationArg, VALUE, LEAF, param)
#define SLANG_Value_SPIRVAsmOperand(x, param)     x(SPIRVAsmOperand, NO_SUPER, AST_EXPR, SPIRVAsmOperand, VALUE, BASE, param)
#define SLANG_Value_SPIRVAsmInst(x, param)     x(SPIRVAsmInst, NO_SUPER, AST_EXPR, SPIRVAsmInst, VALUE, BASE, param)
} // namespace Slang
